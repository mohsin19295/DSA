/*
? Generate all subsequence

A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.
You are given a string S. You have to generate all the subsequences of the string S using a recursive approach (duplicates allowed)

*Input Format:
First line of the input contains length of the string S
Second line of the test case contains the string S

*Constraints:
n <= 18

*Output Format:
Output all the substring in a particular order. To understand the order of printing, see the sample test case explanation

Input: 4
abcd

Output: a
ab
abc
abcd
abd
ac
acd
ad
b
bc
bcd
bd
c
cd
d

*Output Explanation:
First output all the subsequences starting with first character. When all such subsequences got printed, then move to print all such starting with second chars, and so on.
*/

function runProgram(input) {
  input = input.split("\n");
  let n = +input[0];
  let str = input[1];
  let [newStr, cur] = ["", 0];

  generateSubSeq(str, newStr, cur);
}

generateSubSeq = (str, newStr, cur) => {
  if (newStr.length > 0) console.log(newStr);
  if (cur === str.length) return;

  for (let i = cur; i < str.length; i++) {
    newStr += str[i];
    generateSubSeq(str, newStr, i + 1);
    newStr = newStr.slice(0, -1);
  }
};
if (process.env.USERNAME === "ubuntu") {
  runProgram(`4
abcd`);
} else {
  process.stdin.resume();
  process.stdin.setEncoding("ascii");
  let read = "";
  process.stdin.on("data", function (input) {
    read += input;
  });
  process.stdin.on("end", function () {
    read = read.replace(/\n$/, "");
    read = read.replace(/\n$/, "");
    runProgram(read);
  });
  process.on("SIGINT", function () {
    read = read.replace(/\n$/, "");
    runProgram(read);
    process.exit(0);
  });
}
